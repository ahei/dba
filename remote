#!/usr/bin/env bash

# Time-stamp: <2015-06-03 11:00:51 Wednesday by ahei>

readonly PROGRAM_NAME="remote"
readonly PROGRAM_VERSION="1.0"

bin=`dirname "$0"`
bin=`cd "$bin"; pwd`

. "$bin"/common.sh

usage()
{
    local code=1
    if [ $# -gt 0 ]; then
        code="$1"
    fi

    if [ "$code" != 0 ]; then
        local redirect="1>&2"
    fi

    eval cat "$redirect" << EOF
usage: ${PROGRAM_NAME} [OPTIONS] (-H <HOST> | -f <HOSTS_FILE> | <CLUSTER>) <COMMAND>
       ${PROGRAM_NAME} [OPTIONS] -c (-H <HOST> | -f <HOSTS_FILE> | <CLUSTER>) <FILE> [<DST_FILE>]

Options:
    -H <HOST>
        Add host.
    -f <HOSTS_FILE>
        Add the hosts file.
    -F <LOCAL_FILE>
        Add the local file to copy.
    -l <LOGIN_NAME>
        Specifies the user to log in as on the remote machine.
    -n  Do not really execute command, only print command to execute.
    -V  Output command to be executed to standard output.
    -q  Quiet; do not write anything to standard output.
    -s  When execute commands failed, stop execute other commands and exit.
    -g  Execute command foreground.
    -o SSH_OPTIONS
        Set ssh options.
    -N  If hosts you specified contain current host, do not execute or scp files.
    -c  Use file copy mode.
    -C  When execute command on remote server, force change directory to work directory on current host.
    -v  Output version info.
    -h  Output this help.
EOF

    exit "$code"
}

# $1是否是本机
isCurrentHost()
{
    local host="$1"
    [ "$HOSTNAME" = "$host" ] || LANG= ifconfig | egrep "inet addr:[^ ]+" -o | cut -d: -f2 | fgrep -x "$host" -q
}

isExecute=1
background="&"
isQuiet=0

. ~/.remoterc 2>/dev/null
. ~/.remoterc 2>/dev/null

while getopts ":hvH:f:l:Vqsigo:NcCn" OPT; do
    case "$OPT" in
        H)
            hosts="$hosts $OPTARG"
            ;;

        f)
            if [ ! -r "$OPTARG" ]; then
                echoe "Can not read file \`$OPTARG'."
                usage
            fi
            
            hosts="$hosts `cat $OPTARG`"
            ;;

        l)
            user="$OPTARG"
            ;;

        n)
            isExecute=0
            ;;

        V)
            isQuiet=0
            ;;

        q)
            isQuiet=1
            ;;

        s)
            isStop=1
            ;;

        g)
            background=
            ;;

        o)
            sshOptions="$OPTARG"
            ;;

        N)
            excludeCurrent=1
            ;;

        C)
            forceCD=1
            ;;

        c)
            copyMode=1
            ;;
        
        v)
            version
            ;;

        h)
            usage 0
            ;;

        :)
        case "${OPTARG}" in
            ?)
                echoe "Option \`-${OPTARG}' need argument.\n"
                usage
        esac
        ;;

        ?)
            echoe "Invalid option \`-${OPTARG}'.\n"
            usage
            ;;
    esac
done

shift $((OPTIND - 1))

sshOpts="-o StrictHostKeyChecking=no $sshOptions"
ssh="ssh $sshOpts"
scp="scp $sshOpts"

# 执行命令
if [ -z "$copyMode" ]; then
    # 第一个参数为cluster
    if [ -z "$hosts" ]; then
        if [ "$#" -lt 1 ]; then
            echoe "No cluster specify.\n"
            usage
        fi

        cluster=$1
        hosts="$(eval echo \$$cluster)"
        if [ -z "$hosts" ]; then
            echoe "Cluster $cluster is empty!"
            usage
        fi
        
        shift
    fi
    
    if [ "$#" -lt 1 ]; then
        echoe "No command specify.\n"
        usage
    fi

    command="$@"

    if [ "$forceCD" ]; then
        command="cd $(pwd) && $command"
    else
        command="cd $(pwd) 2>/dev/null; $command"
    fi

    for i in $hosts; do
        [ -n "$user" ] && login=" -l $user"
        
        if [ -n "$excludeCurrent" ]; then
            if isCurrentHost "$i"; then
                continue
            fi
        fi
        
        executeCommand "$ssh $i$login \"$command\" 2>&1 | sed \"s/^/$i: /\" $background" "$isExecute" "$isQuiet" "$isStop"
    done

    wait
    
    exit
fi

# 拷贝文件
if [ -z "$hosts" ]; then
    if [ "$#" -lt 1 ]; then
        echoe "No cluster specify.\n"
        usage
    fi
    cluster=$1
    hosts="$(eval echo \$$cluster)"
    if [ -z "$hosts" ]; then
        echoe "Cluster $cluster is empty!"
        usage
    fi

    shift
fi

if [ "$#" -lt 1 ]; then
    echoe "No source file specify.\n"
    usage
fi
srcFile="$1"
shift

dstFile="$1"
[ "$dstFile" ] && dstFile=$(toAbsPath "$dstFile")
if [ -z "$dstFile" ]; then
    dstFile=$(dirname $(normalizePath "$srcFile"))
    excludeCurrent=1
fi
    
for i in $hosts; do
    if [ -z "$user" ]; then
        host="$i"
    else
        host="$user@$i"
    fi

    if [ -n "$excludeCurrent" ]; then
        if isCurrentHost "$host"; then
            continue
        fi
    fi
    
    executeCommand "$scp -r $srcFile $host:$dstFile 2>&1 | sed \"s/^/$i: /\" $background" "$isExecute" "$isQuiet" "$isStop"
done

wait
