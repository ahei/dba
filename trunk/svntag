#!/bin/sh

# Time-stamp: <05/14/2009 11:00:24 星期四 by ahei>

# @file svntag
# @version 1.0
# @author ahei

readonly PROGRAM_NAME="svntag"
readonly PROGRAM_VERSION="1.0"

bin=`dirname "$0"`
bin=`cd "$bin"; pwd`

. "$bin"/common.sh

usage()
{
    code=1
    if [ $# -gt 0 ]; then
        code="$1"
    fi

    if [ "$code" != 0 ]; then
        redirect="1>&2"
    fi

    eval cat "$redirect" << EOF
usage: ${PROGRAM_NAME} [OPTIONS]

This shell script can help you create or merge svn tag.

Options:
    -c  Create or merge svn current tag.
    -r  Create or merge svn release tag.
    -t <TRUNK_DIR>
        The directory of trunk, default is \`trunk'.
    -T <TAGS_DIR>
        The directory of tags, default is \`tags'.
    -i [<INSTALL_DIR>]
        Install this shell script to your machine, INSTALL_DIR default is /usr/bin.
    -n  Do not really execute command, only print command to execute.
    -R [<FILE>]
        Rollback to prev revision, <FILE> default is \`.'.
    -N <TAG_NAME>
        Set tag name manual.
    -q  Quiet, do not write process info to standard output.
    -s  When execute commands failed, stop execute other commands and exit.
    -d  Do not svn up trunk directory.
    -v  Output version info.
    -h  Output this help.
EOF
    
    exit "$code"
}

getRevisionNo()
{
    dir="$1"
    LANG= svn info "${dir}" 2>/dev/null | grep "Revision: " | sed -r "s/^Revision: ([[:digit:]]+)$/\1/g"
}

rollback()
{
    dir="$1"
    isExecute="$2"
    
    executeCommand "svn up ${dir}" "${isExecute}" "$isQuiet" "$isStop"
    executeCommand "svn merge -r HEAD:PREV ${dir}" "${isExecute}" "$isQuiet" "$isStop"
    exit $?
}

trunkDir="trunk"
tagsDir="tags"
isExecute=1

while getopts ":hvcri:t:T:nR:N:sd" OPT; do
    case "$OPT" in
        c)
            tagName="current"
            ;;
            
        r)
            tagName="release"
            ;;

        i)
            install "$OPTARG"
            ;;
            
        t)
            trunkDir="${OPTARG}"
            ;;

        T)
            tagsDir="${OPTARG}"
            ;;

        n)
            isExecute=0
            ;;

        R)
            rollbackFile="${OPTARG}"
            ;;

        N)
            tagName="${OPTARG}"
            ;;
            
        q)
            isQuiet=1
            ;;

        s)
            isStop=1
            ;;

        d)
            notSvnup=1
            ;;
            
        v)
            version
            ;;

        h)
            usage 0
            ;;

        :)
        case "${OPTARG}" in
            i)
                install
                ;;
                
            R)
                rollbackFile="."
                ;;

            ?)
                echo "Option \`-${OPTARG}' need argument.\n"
                usage
        esac
        ;;

        ?)
            echo "Invalid option \`-${OPTARG}'.\n"
            usage
            ;;
    esac
done

[ -n "${rollbackFile}" ] && rollback "${rollbackFile}" "${isExecute}"

if [ -z "${tagName}" ]; then
    usage
fi

if [ -f "${tagsDir}/${tagName}" ]; then
    echo "File ${tagsDir}/${tagName} is exists, can not create tag \`${tagName}'."
    exit 1
fi

dateTimeRegexp="[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}"

[ "$notSvnup" != 1 ] && executeCommand "svn up ${trunkDir}" "${isExecute}" "$isQuiet" "$isStop"

# merge tag
if [ -d "${tagsDir}/${tagName}" ]; then
    executeCommand "svn up ${tagsDir}/${tagName}" "${isExecute}" "$isQuiet" "$isStop"

    fromRevisionNo=`svn log "${tagsDir}/${tagName}" -r COMMITTED | sed -n 4p | sed -r "s/^Create tag ${tagName} from trunk r([[:digit:]]+)\.$/\1/g" | grep -x -E "[[:digit:]]+"`
    if [ -z "${fromRevisionNo}" ]; then
        fromRevisionNo=`svn log "${tagsDir}/${tagName}" -r COMMITTED | sed -n 4p | sed -r "s/^Merge trunk r[[:digit:]]+:([[:digit:]]+) to tag ${tagName}\.$/\1/g" | grep -x -E "[[:digit:]]+"`
    fi
    if [ -z "${fromRevisionNo}" ]; then
        executeCommand "svn rm --force ${tagsDir}/$tagName" "${isExecute}" "$isQuiet" "$isStop"
        executeCommand "svn ci ${tagsDir}/$tagName -m \"Delete tag $tagName by $PROGRAM_NAME, because can not get revision from it's log.\"" "${isExecute}" "$isQuiet" "$isStop"
        createTag=1
    fi

    if [ "$createTag" != 1 ]; then
        if [ "${tagName}" = "release" ]; then
            dateTime=`svn log "${tagsDir}/${tagName}" -r COMMITTED | sed -n 2p | sed -r "s/^r[[:digit:]]+ \| .+ \| (${dateTimeRegexp}).* \| .*$/\1/g" | grep -x -E "${dateTimeRegexp}" | sed "s/ /-/g; s/:/_/g"`
            if [ -z "${dateTime}" ]; then
                echo "Get date time of tag ${tagName} failed."
                exit 1
            fi
            
            executeCommand "svn cp ${tagsDir}/${tagName} ${tagsDir}/${tagName}_${dateTime}" "${isExecute}" "$isQuiet" "$isStop"
        fi

        toRevisionNo=`getRevisionNo "${trunkDir}"`
        executeCommand "svn merge ${trunkDir} -r${fromRevisionNo}:${toRevisionNo} ${tagsDir}/${tagName}" "${isExecute}" "$isQuiet" "$isStop"
        executeCommand "svn ci -m \"Merge trunk r${fromRevisionNo}:${toRevisionNo} to tag ${tagName}.\"" "${isExecute}" "$isQuiet" "$isStop"
        
        exit
    fi
fi

# create tag
revisionNo=`getRevisionNo "${trunkDir}"`
if [ -z "${revisionNo}" ]; then
    echo "Get revision number of ${trunkDir} failed."
    exit 1
fi

executeCommand "svn cp ${trunkDir} ${tagsDir}/${tagName}" "${isExecute}" "$isQuiet" "$isStop"
executeCommand "svn ci -m \"Create tag ${tagName} from trunk r${revisionNo}.\"" "${isExecute}" "$isQuiet" "$isStop"
