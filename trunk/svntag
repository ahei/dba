#!/bin/sh

# Time-stamp: <03/13/2009 17:29:54 星期五 by ahei>

readonly PROGRAM_NAME="svntag"
readonly PROGRAM_VERSION="1.0"

usage()
{
    echo "usage: ${PROGRAM_NAME} [OPTIONS]"
    echo
    echo "This shell script can help you create or merge svn current or release tag, "
    echo
    echo "Options:"
    echo "\t-c\tCreate or merge svn current tag."
    echo "\t-r\tCreate or merge svn release tag."
    echo "\t-t <TRUNK_DIR>"
    echo "\t\tThe directory of trunk, default is \`trunk'."
    echo "\t-T <TAGS_DIR>"
    echo "\t\tThe directory of tags, default is \`tags'."
    echo "\t-i\tInstall this shell script to your machine."
    echo "\t-n\tDo not execute command, only print command to execute"
    echo "\t-R <FILE>"
    echo "\t\tRollback to prev revision"
    echo "\t-v\tOutput version info."
    echo "\t-h\tOutput this help."
    
    exit 1
}

version()
{
    echo "${PROGRAM_NAME} ${PROGRAM_VERSION}"
    exit 1
}

install()
{
    cp "$0" "${installDir}"
    ret=$?
    if [ "${ret}" = 0 ]; then
        echo "Install finished."
    fi
    exit "${ret}"
}

executeCommand()
{
    command="$1"
    isExecute="$2"

    echo "Executing command \`${command}' ..."
    if [ "${isExecute}" != "0" ]; then
        eval "${command}"
        if [ $? != 0 ]; then
            echo "Execute command \`${command}' failed"
            exit 1
        fi
    fi
}

getRevisionNo()
{
    dir="$1"
    LANG= svn info "${dir}" -r HEAD 2>/dev/null | grep "Revision: " | sed -r "s/^Revision: ([[:digit:]]+)$/\1/g"
}

rollback()
{
    executeCommand "svn merge -r HEAD:PREV $1" "$2"
    exit $?
}

installDir="/usr/bin"
trunkDir="trunk"
tagsDir="tags"
isExecute=1

while getopts :hvcrit:T:nR: OPT; do
    case "$OPT" in
        c)
            tagName="current"
            ;;
            
        r)
            tagName="release"
            ;;

        i)
            install
            ;;
            
        t)
            trunkDir="${OPTARG}"
            ;;

        T)
            tagsDir="${OPTARG}"
            ;;

        n)
            isExecute=0
            ;;

        R)
            rollbackFile="${OPTARG}"
            ;;
            
        v)
            version
            ;;

        h)
            usage
            ;;

        :)
        case "${OPTARG}" in
            R)
                rollbackFile="."
                ;;

            ?)
                echo "Option \`-${OPTARG}' need argument."
                usage
        esac
        ;;

        ?)
            echo "Invalid option \`-${OPTARG}'."
            usage
            ;;
    esac
done

[ -n "${rollbackFile}" ] && rollback "${rollbackFile}" "${isExecute}"

if [ -z "${tagName}" ]; then
    usage
fi

if [ -f "${tagsDir}/${tagName}" ]; then
    echo "File ${tagsDir}/${tagName} is exists, can not create tag \`${tagName}'."
    exit 1
fi

dateTimeRegexp="[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}"

# merge tag
if [ -d "${tagsDir}/${tagName}" ]; then
    fromRevisionNo=`svn log "${tagsDir}/${tagName}" -r COMMITTED | sed -n 4p | sed -r "s/^Create tag ${tagName} from trunk r([[:digit:]]+)\.$/\1/g" | grep -x -E "[[:digit:]]+"`
    if [ -z "${fromRevisionNo}" ]; then
        fromRevisionNo=`svn log "${tagsDir}/${tagName}" -r COMMITTED | sed -n 4p | sed -r "s/^Merge trunk r[[:digit:]]+:([[:digit:]]+) to tag ${tagName}\.$/\1/g" | grep -x -E "[[:digit:]]+"`
    fi
    if [ -z "${fromRevisionNo}" ]; then
        echo "Get from revision number of ${tagsDir}/${tagName} failed."
        exit 1
    fi

    executeCommand "svn up ${trunkDir}" "${isExecute}"
    executeCommand "svn up ${tagsDir}/${tagName}" "${isExecute}"

    if [ "${tagName}" = "release" ]; then
        dateTime=`svn log "${tagsDir}/${tagName}" -r COMMITTED | sed -n 2p | sed -r "s/^r[[:digit:]]+ \| .+ \| (${dateTimeRegexp}).* \| .*$/\1/g" | grep -x -E "${dateTimeRegexp}" | sed "s/ /-/g"`
        if [ -z "${dateTime}" ]; then
            echo "Get date time of tag ${tagName} failed."
            exit 1
        fi
            
        executeCommand "svn cp ${tagsDir}/${tagName} ${tagsDir}/${tagName}_${dateTime}" "${isExecute}"
    fi

    toRevisionNo=`getRevisionNo "${trunkDir}"`
    executeCommand "svn merge ${trunkDir} -r${fromRevisionNo}:${toRevisionNo} ${tagsDir}/${tagName}" "${isExecute}"
    executeCommand "svn ci -m \"Merge trunk r${fromRevisionNo}:${toRevisionNo} to tag ${tagName}.\"" "${isExecute}"
    
    exit
fi

# create tag
revisionNo=`getRevisionNo "${trunkDir}"`
if [ -z "${revisionNo}" ]; then
    echo "Get revision number of ${trunkDir} failed."
    exit 1
fi

executeCommand "svn up ${trunkDir}" "${isExecute}"
executeCommand "svn up ${tagsDir}/${tagName}" "${isExecute}"
executeCommand "svn cp ${trunkDir} ${tagsDir}/${tagName}" "${isExecute}"
executeCommand "svn ci -m \"Create tag ${tagName} from trunk r${revisionNo}.\"" "${isExecute}"
