#!/usr/bin/env bash

# Time-stamp: <2015-09-30 15:46:31 Wednesday by ahei>

# @file rgrep.sh
# @version 1.0
# @author ahei

readonly PROGRAM_NAME="rgrep"
readonly PROGRAM_VERSION="1.0.0"

home=`cd $(dirname "$0") && pwd`

. "$home"/common.sh

usage()
{
    local code=1
    local redirect
    
    if [ $# -gt 0 ]; then
        code="$1"
    fi

    if [ "$code" != 0 ]; then
        redirect="1>&2"
    fi

    eval cat "$redirect" << EOF
usage: ${PROGRAM_NAME} [OPTIONS] (-H <HOST> | -f <HOSTS_FILE> | <CLUSTER>) <PATTERN> <FILES> [<OTHER_GREP_OPTIONS>]
       ${PROGRAM_NAME} [OPTIONS] -a <CLUSTER> <PATTERN> [<OTHER_GREP_OPTIONS>]

Options:
    -a Automatic get files to grep by <CLUSTER>, when set this option, must specify cluster.
    -o REMOTE_OPTIONS
        Set remote's options.
    GERP
        Environment variable used to specify which grep to use.
    -C
        No color display.
    -h <HOUR>
        Set which hour log to grep.
    -d <DAY>
        Set which day log to grep.
    -D <DAY>
        Search all logs about this day.
    -s
        Sort files by date time you specified.
    -B <TIME_BEGIN>
        Set time begin string on every line.
    -E <TIME_END>
        Set time end string on every line.
    -n  Do not really execute command, only print command to execute.
    -v  Output version info.
EOF

    exit "$code"
}

# $1 cluster
# $2 day
# $3 hour
getLogFiles()
{
    local cluster=$1
    local day=$2
    local hour=$3
    local files

    for key in "${!clusterLogs[@]}"; do
        if grep -qx "$key" <<< "$cluster"; then
            files="${clusterLogs[$key]}"
        fi
    done

    if [ ! "$files" ]; then
        echo -n "$files"
        return
    fi

    if [ "$day" ]; then
        files=$(sed -r "s/%d/$(printf %02d $day)/g" <<< "$files")
        files=$(sed -r "s/%e/$(printf %2d $day)/g" <<< "$files")
    fi
    if [ "$hour" ] ; then
        if [ "$hour" != '*' ]; then
            files=$(sed -r "s/%H|%I/$(printf %02d $hour)/g" <<< "$files")
            files=$(sed -r "s/%k|%l/$(printf %2d $hour)/g" <<< "$files")
        else
            files=$(sed -r "s/%H|%I/$hour/g" <<< "$files")
            files=$(sed -r "s/%k|%l/$hour/g" <<< "$files")
        fi
    fi

    files=$(date +"$files")
    echo -n "$files"
}

sortFiles()
{
    if [ ! "$sortByTime" ]; then
        cat
        return
    fi
    
    cat | awk -v timeBegin="$timeBegin" -v timeEnd="$timeEnd" '{
prefix = ":[m[K"; # grep maybe have color output
begin = index($ 0, prefix timeBegin);
if (begin == 0) {begin = index($ 0, timeBegin);}
else {timeBegin = prefix timeBegin;}
end = index($ 0, timeEnd);
timeStr = substr($ 0, begin + length(timeBegin), end - begin - length(timeBegin));
if (timeStr == "") print;
else results[timeStr] = $ 0;
} END {
size = asorti(results, sortedResults);
for (i = 1; i <= size; i++) print results[sortedResults[i]]}'
}

optInd=1
colorOption=--color=always

while getopts ":h:d:vo:aH:CsB:E:D:n" OPT; do
    case "$OPT" in
        H)
            hosts="$hosts $OPTARG"
            let optInd+=2
            ;;

        C)
            colorOption=
            let optInd++
            ;;
            
        o)
            remoteOptions="$OPTARG"
            let optInd+=2
            ;;

        n)
            remoteOptions="$remoteOptions -n -V"
            let optInd++
            ;;

        a)
            automaticGetFiles=1
            let optInd++
            ;;

        s)
            sortByTime=1
            let optInd++
            ;;

        B)
            timeBegin="$OPTARG"
            let optInd+=2;
            ;;

        E)
            timeEnd="$OPTARG"
            let optInd+=2;
            ;;
        
        h)
            hour="$OPTARG"
            let optInd+=2
            ;;
            
        d)
            day="$OPTARG"
            let optInd+=2
            ;;

        D)
            day="$OPTARG"
            hour='*'
            let optInd+=2
            ;;

        v)
            version
            ;;

        :)
            case "${OPTARG}" in
                ?)
                    echoe "Option \`-${OPTARG}' need argument.\n"
                    usage
            esac
            ;;

        ?)
            echoe "Invalid option \`-${OPTARG}'.\n"
            usage
            ;;
    esac
done

shift $((optInd - 1))

[ -z "$GREP" ] && GREP=grep

if [ "$timeBegin" ] && [ "$timeEnd" ]; then
    sortByTime=1
fi

if [ ! "$automaticGetFiles" ]; then
    if [ "$hosts" ]; then
        if [ $# -lt 2 ]; then
            usage
        fi
    else
        if [ $# -lt 3 ]; then
            usage
        fi
    fi
    
    if [ ! "$hosts" ]; then
        cluster=$1
        shift
    fi
    pattern=$1
    shift
    
    remote $remoteOptions -H "$hosts" $cluster "$GREP $colorOption '$pattern' $@" | sortFiles
    exit $?
fi

if [ $# -lt 2 ]; then
    usage
fi

declare -A clusterLogs
. ~/.rgreprc 2>/dev/null

cluster=$1
pattern=$2
shift 2

files=$(getLogFiles "$cluster" "$day" "$hour")
if [ ! "$files" ]; then
    echoe "No log files specified for cluster $cluster!"
    usage
fi

remote $remoteOptions "$cluster" "$GREP $colorOption '$pattern' $files $@" | sortFiles
